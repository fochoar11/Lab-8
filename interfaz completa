/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdint.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
uint8_t semaforo = 0;
uint8_t rxData = 0;
volatile uint8_t jugador1 = 0;
volatile uint8_t pausa = 0;
volatile uint8_t jugador2 = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{

    if (pausa == 0)
    {
        static uint32_t lastInterruptTime = 0;
        uint32_t currentTime = HAL_GetTick();


        if (currentTime - lastInterruptTime >= 50)
        {
            lastInterruptTime = currentTime;


            if (jugador1 == 4 || jugador2 == 4)
            {

                HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
                return;
            }

            if (GPIO_Pin == b1_Pin)
            {
                if (HAL_GPIO_ReadPin(b1_GPIO_Port, b1_Pin) == 1)
                {
                    jugador1++;
                    if (jugador1 > 4)
                        jugador1 = 0;
                }
            }
            else if (GPIO_Pin == b2_Pin)
            {
                jugador2++;
                if (jugador2 > 4)
                    jugador2 = 0;
            }
        }
    }
}

void verificarGanador(void)
{
    if (jugador1 == 4)
    {

        char mensaje[] = "Jugador 1 ha ganado\n";
        HAL_UART_Transmit(&huart2, (uint8_t*)mensaje, strlen(mensaje), HAL_MAX_DELAY);
        pausa = 1;
    }
    else if (jugador2 == 4)
    {

        char mensaje[] = "Jugador 2 ha ganado\n";
        HAL_UART_Transmit(&huart2, (uint8_t*)mensaje, strlen(mensaje), HAL_MAX_DELAY);
        pausa = 1;
    }
}
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_UART_Receive(&huart2, &rxData, 1, 10) == HAL_OK)
	      {
	          if (rxData == 'S')
	          {
	              semaforo = 0;
	              pausa = 1;


	  	  	  	  HAL_GPIO_WritePin(led9_GPIO_Port, led9_Pin, 1);
	              HAL_Delay(1000);
	              HAL_GPIO_WritePin(led9_GPIO_Port, led9_Pin, 0);

	              HAL_GPIO_WritePin(led10_GPIO_Port, led10_Pin, 1);
	              HAL_Delay(1000);
	              HAL_GPIO_WritePin(led10_GPIO_Port, led10_Pin, 0);

	              HAL_GPIO_WritePin(led11_GPIO_Port, led11_Pin, 1);
	              HAL_Delay(1000);
	              HAL_GPIO_WritePin(led11_GPIO_Port, led11_Pin, 0);
	              pausa = 0;
	              jugador1 = 0;
	              jugador2 = 0;
	              semaforo = 0;

	              HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
	              HAL_UART_Transmit(&huart2, (uint8_t*)"Juego iniciado\n", 18, HAL_MAX_DELAY);
	          }
	      }
	  	  	  	  verificarGanador();


	  	  	HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, (jugador1 >= 1) ? 1 : 0);
	        HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, (jugador1 >= 2) ? 1 : 0);
	        HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, (jugador1 >= 3) ? 1 : 0);
	        HAL_GPIO_WritePin(led4_GPIO_Port, led4_Pin, (jugador1 >= 4) ? 1 : 0);

	        HAL_GPIO_WritePin(led5_GPIO_Port, led5_Pin, (jugador2 >= 1) ? 1 : 0);
	        HAL_GPIO_WritePin(led6_GPIO_Port, led6_Pin, (jugador2 >= 2) ? 1 : 0);
	        HAL_GPIO_WritePin(led7_GPIO_Port, led7_Pin, (jugador2 >= 3) ? 1 : 0);
	        HAL_GPIO_WritePin(led8_GPIO_Port, led8_Pin, (jugador2 >= 4) ? 1 : 0);

  }
}



    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */


/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led9_Pin|led10_Pin|led3_Pin|led4_Pin
                          |led5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led11_Pin|led6_Pin|led7_Pin|led8_Pin
                          |led1_Pin|led2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : led9_Pin led10_Pin led3_Pin led4_Pin
                           led5_Pin */
  GPIO_InitStruct.Pin = led9_Pin|led10_Pin|led3_Pin|led4_Pin
                          |led5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : led11_Pin led6_Pin led7_Pin led8_Pin
                           led1_Pin led2_Pin */
  GPIO_InitStruct.Pin = led11_Pin|led6_Pin|led7_Pin|led8_Pin
                          |led1_Pin|led2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : b1_Pin b2_Pin */
  GPIO_InitStruct.Pin = b1_Pin|b2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
